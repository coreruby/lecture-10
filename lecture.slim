section.center data-background="#000"
  h1.white Require

section.center data-background="#F00"
  p.white I'm unavailable next week

section.center data-background="#F00"
  p.white November 10th to 15th

section.center data-background="#F00"
  p.white What does that mean?

section.center data-background="#87cefa"
  p.white Beaches

section.center data-background="#87cefa"
  p.white Responsible drinking

section.center data-background="#87cefa"
  p.white Safe sex

section.center data-background="#87cefa"
  p.white Moderate amounts of fun

section.center data-background="#87cefa"
  p.white Moderate amounts of fun

section.center data-background="#F00"
  p.white For me and me only

section.center data-background="#F00"
  p.white You still got to go to class

section.center
  img.inline src="img/troll.png"

section.center
  p Let me introduce you to Stanlislav and Akseniya

section.center data-background="#000"
  h2.white Questions

section.center
  p What does Object#is_a? do?

section.center
  p What does Object#kind_of? do?

section.center
  p What does Object#instance_of? do?

section.center
  p What is a method alias?

section.center
  p What is the difference between alias and alias_method?

section.center
  p What does Object#send does?

section.center
  p What does Object#public_send does?

section.center
  p What does Kernel#raise do?

section.center
  p What does Kernel#fail do?

section.center
  pre: code.ruby contenteditable="true"
    '
      begin
        {}.fetch(42)
      rescue IndexError
        :index_error
      rescue KeyError
        :key_error
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      begin
        [].fetch(42)
      rescue StandardError
        :standard_error
      rescue IndexError
        :index_error
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      begin
        raise Exception
      rescue
        :what_kind_of_error?
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      begin
        [].fetch(42)
      rescue
        :what_kind_of_error?
      end

section.center
  p What does Object#=== does?

section.center
  pre: code.ruby contenteditable="true"
    '
      class something
        private def shh() "IT'S A SECRET!" end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        INSIDE = :foo
        module Bar
          INSIDE = :bar
          module Quux
            INSIDE = :quux
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      Foo::INISDE            #=> :?
      Foo::Bar::INISDE       #=> :?
      Foo::Bar::Quux::INSIDE #=> :?

section.center
  pre: code.ruby contenteditable="true"
    '
      Foo::INISDE            #=> :foo
      Foo::Bar::INISDE       #=> :?
      Foo::Bar::Quux::INSIDE #=> :?

section.center
  pre: code.ruby contenteditable="true"
    '
      Foo::INISDE            #=> :foo
      Foo::Bar::INISDE       #=> :bar
      Foo::Bar::Quux::INSIDE #=> :?

section.center
  pre: code.ruby contenteditable="true"
    '
      Foo::INISDE            #=> :foo
      Foo::Bar::INISDE       #=> :bar
      Foo::Bar::Quux::INSIDE #=> :quux

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            p INSIDE      #=> :?
            p Bar::INSIDE #=> :?
            p Foo::INSIDE #=> :?
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            p ::Foo::Bar::Quux::INSIDE #=> :quux
            p ::Foo::Bar::INSIDE       #=> :bar
            p ::Foo::INSIDE            #=> :foo
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            p Object::Foo::Bar::Quux::INSIDE #=> :?
            p Object::Foo::Bar::INSIDE       #=> :?
            p Object::Foo::INSIDE            #=> :?
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            p Object::Foo::Bar::Quux::INSIDE #=> :quux
            p Object::Foo::Bar::INSIDE       #=> :bar
            p Object::Foo::INSIDE            #=> :foo
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            module Object
              INSIDE = :object
            end
            p Object::INSIDE                 #=> :?
            p Object::Foo::Bar::Quux::INSIDE #=> :?
            p Object::Foo::Bar::INSIDE       #=> :?
            p Object::Foo::Bar::INSIDE       #=> :?
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            module Object
              INSIDE = :object
            end
            p Object::INSIDE                 #=> :object
            p Object::Foo::Bar::Quux::INSIDE #=> NameError
            p Object::Foo::Bar::INSIDE       #=> NameError
            p Object::Foo::INSIDE            #=> NameError
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            module Object
              INSIDE = :object
            end
            p Object::INSIDE                   #=> :?
            p ::Object::Foo::Bar::Quux::INSIDE #=> :?
            p ::Object::Foo::Bar::INSIDE       #=> :?
            p ::Object::Foo::INSIDE            #=> :?
          end
        end
      end

section.center
  pre: code.ruby contenteditable="true"
    '
      module Foo
        module Bar
          module Quux
            module Object
              INSIDE = :object
            end
            p Object::INSIDE                   #=> :object
            p ::Object::Foo::Bar::Quux::INSIDE #=> :quux
            p ::Object::Foo::Bar::INSIDE       #=> :bar
            p ::Object::Foo::INSIDE            #=> :foo
          end
        end
      end
